<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    보드 매퍼
    BoardRepository 인터페이스와 연결
-->
<mapper namespace="ebrain.board.mapper.BoardRepository">
    <sql id = "searchQuery">
        <!-- 검색어가 존재하는 경우, 제목 또는 내용에 검색어가 포함된 게시글을 검색합니다. -->
        <if test="searchText != null and searchText != ''">
            AND (title LIKE concat('%', #{searchText}, '%')
            OR content LIKE concat('%', #{searchText}, '%'))
        </if>
        <if test="categoryValue != null and categoryValue != ''">
            <!-- 카테고리값이 존재하는 경우, 해당 카테고리로 필터링합니다. -->
            AND target_board.child_code_value = #{categoryValue}
        </if>
        <!-- 생성일자 범위로 필터링합니다. -->
        AND created_at BETWEEN #{startDate} AND DATE_ADD(#{endDate}, INTERVAL 1 DAY)
    </sql>

    <sql id="orderQuery">
        <!-- 정렬 기준에 따라 결과를 정렬합니다. -->
        ORDER BY
        <choose>
            <when test="sortCriteria == 'createdAt'">
                created_at
            </when>
            <when test="sortCriteria == 'title'">
                title
            </when>
            <when test="sortCriteria == 'visitCount'">
                visit_count
            </when>
            <otherwise>
                created_at
            </otherwise>
        </choose>
        <!-- 정렬 순서에 따라 오름차순 또는 내림차순으로 정렬합니다. -->
        <if test="orderBy == 'desc'">
            DESC
        </if>
        <if test="orderBy == 'asc'">
            ASC
        </if>
    </sql>

    <!-- 검색 조건에 해당하는 공지 게시글 리스트 조회  -->
    <select id="searchNoticeBoards" parameterType="SearchConditionDTO" resultType="BoardDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName
        FROM notice_board AS target_board
        JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        WHERE 1=1
        AND is_noticed = 0
        <include refid="searchQuery" />
        <include refid="orderQuery" />
        LIMIT #{pageSize}
        OFFSET #{offset}
    </select>

    <!-- 검색 조건에 해당하는 공지 게시글의 개수를 조회 -->
    <select id="countNoticeBoards" parameterType="SearchConditionDTO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notice_board AS target_board
        WHERE 1=1
        <include refid="searchQuery" />
    </select>

    <!-- 알림 표시된 공지 게시글 목록을 조회 -->
    <select id="getMarkedNoticedBoards" resultType="BoardDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName
        FROM notice_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        WHERE is_noticed = 1
    </select>

    <!-- 알림 표시된 공지 게시글의 개수를 조회 -->
    <select id="countMarkedNoticedBoards" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notice_board
        WHERE is_noticed = 1
    </select>

    <!-- 공지사항의 상세 내용을 조회 -->
    <select id="getNoticeBoardDetail" parameterType="java.lang.Integer" resultType="BoardDTO">
        SELECT target_board.*,target_board.child_code_value as categoryValue, cc.child_code_name AS categoryName
        FROM notice_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        WHERE target_board.board_id = #{boardId}
    </select>

    <!--  공지사항의 카테고리 목록을 조회  -->
    <select id="getNoticeBoardCategories" resultType="CategoryDTO">
        SELECT  cc.child_code_name as categoryName ,cc.child_code_value as categoryValue
        FROM category_child_code cc
                 JOIN category_parent_code cp ON cc.parent_code_value = cp.parent_code_value
        WHERE cp.parent_code_name LIKE '%공지사항%'
    </select>

    <!-- 공지 게시글의 방문수를 1 증가    -->
    <update id="updateNoticeBoardVisitCount" parameterType="java.lang.Integer">
        UPDATE notice_board
        SET visit_count = visit_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 검색 조건에 해당하는 자유 게시글 리스트 조회  -->
    <select id="searchFreeBoards" parameterType="SearchConditionDTO" resultType="BoardDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName
        FROM free_board AS target_board
        JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        WHERE 1=1
        <include refid="searchQuery" />
        <include refid="orderQuery" />
        LIMIT #{pageSize}
        OFFSET #{offset}
    </select>

    <!-- 검색 조건에 해당하는 자유 게시글의 개수를 조회 -->
    <select id="countFreeBoards" parameterType="SearchConditionDTO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM free_board AS target_board
        WHERE 1=1
        <include refid="searchQuery" />
    </select>

    <!-- 공지사항의 상세 내용을 조회 -->
    <select id="getFreeBoardDetail" parameterType="java.lang.Integer" resultType="BoardDTO">
        SELECT target_board.*, target_board.child_code_value as categoryValue, cc.child_code_name AS categoryName
        FROM free_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        WHERE target_board.board_id = #{boardId}
    </select>

    <!--  공지사항의 카테고리 목록을 조회  -->
    <select id="getFreeBoardCategories" resultType="CategoryDTO">
        SELECT cc.child_code_name as categoryName ,cc.child_code_value as categoryValue
        FROM category_child_code cc
                 JOIN category_parent_code cp ON cc.parent_code_value = cp.parent_code_value
        WHERE cp.parent_code_name LIKE '%자유%'
    </select>

    <!-- 공지 게시글의 방문수를 1 증가    -->
    <update id="updateFreeBoardVisitCount" parameterType="java.lang.Integer">
        UPDATE free_board
        SET visit_count = visit_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 자유 게시글 저장   -->
    <insert id="saveFreeBoardInfo" parameterType="BoardDTO" useGeneratedKeys="true" keyProperty="boardId" >
        INSERT INTO free_board
            (title, content, user_id, created_at, visit_count, child_code_value)
        VALUES(#{title}, #{content},#{userId},now(),0,#{categoryValue})
    </insert>

    <!-- boardId 게시글에 대한 작성자가 userId인지 확인.-->
    <select id="hasFreeBoardEditPermission" resultType="int">
        SELECT COUNT(*) > 0
        FROM free_board
        WHERE board_id = #{boardId}
          AND user_id = #{userId}
    </select>
    <!-- 자유게시글 삭제 -->
    <delete id="deleteFreeBoard">
        DELETE FROM free_board
        WHERE board_id = #{boardId}
        AND user_id = #{userId}
    </delete>
    <!-- 자유 게시글 수정 -->
    <update id="updateFreeBoardInfo" parameterType="BoardDTO">
        UPDATE free_board
        SET title = #{title}, content = #{content}, user_id = #{userId}, child_code_value = #{categoryValue}
        WHERE board_id = #{boardId}
    </update>

</mapper>