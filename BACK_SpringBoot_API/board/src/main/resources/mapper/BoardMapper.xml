<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    보드 매퍼
    BoardRepository 인터페이스와 연결
-->
<mapper namespace="ebrain.board.mapper.BoardRepository">
    <sql id="searchQuery">
        <!-- 검색어가 존재하는 경우, 제목 또는 내용에 검색어가 포함된 게시글을 검색합니다. -->
        <if test="searchText != null and searchText != ''">
            AND (title LIKE concat('%', #{searchText}, '%')
            OR content LIKE concat('%', #{searchText}, '%'))
        </if>
        <if test="categoryValue != null and categoryValue != ''">
            <!-- 카테고리값이 존재하는 경우, 해당 카테고리로 필터링합니다. -->
            AND target_board.child_code_value = #{categoryValue}
        </if>
        <!-- 생성일자 범위로 필터링합니다. -->
        AND created_at BETWEEN #{startDate} AND DATE_ADD(#{endDate}, INTERVAL 1 DAY)
    </sql>

    <sql id="orderQuery">
        <!-- 정렬 기준에 따라 결과를 정렬합니다. -->
        ORDER BY
        <choose>
            <when test="sortCriteria == 'createdAt'">
                created_at
            </when>
            <when test="sortCriteria == 'title'">
                title
            </when>
            <when test="sortCriteria == 'visitCount'">
                visit_count
            </when>
            <otherwise>
                created_at
            </otherwise>
        </choose>
        <!-- 정렬 순서에 따라 오름차순 또는 내림차순으로 정렬합니다. -->
        <if test="orderBy == 'desc'">
            DESC
        </if>
        <if test="orderBy == 'asc'">
            ASC
        </if>
    </sql>

    <!-- 검색 조건에 해당하는 공지 게시글 리스트 조회  -->
    <select id="searchNoticeBoards" parameterType="SearchConditionDTO" resultType="BoardNoticeDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id AS userId
        FROM notice_board AS target_board
        JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        JOIN users AS u ON target_board.admin_seq_id = u.seq_id
        WHERE 1=1
        AND is_noticed = 0
        <include refid="searchQuery"/>
        <include refid="orderQuery"/>
        LIMIT #{pageSize}
        OFFSET #{offset}
    </select>

    <!-- 검색 조건에 해당하는 공지 게시글의 개수를 조회 -->
    <select id="countNoticeBoards" parameterType="SearchConditionDTO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notice_board AS target_board
        WHERE 1=1
        <include refid="searchQuery"/>
    </select>

    <!-- 알림 표시된 공지 게시글 목록을 조회 -->
    <select id="getMarkedNoticedBoards" resultType="BoardNoticeDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id AS userId
        FROM notice_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.admin_seq_id = u.seq_id
        WHERE is_noticed = 1
    </select>

    <!-- 알림 표시된 공지 게시글의 개수를 조회 -->
    <select id="countMarkedNoticedBoards" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notice_board
        WHERE is_noticed = 1
    </select>

    <!-- 공지사항의 상세 내용을 조회 -->
    <select id="getNoticeBoardDetail" parameterType="java.lang.Integer" resultType="BoardNoticeDTO">
        SELECT target_board.*,
               target_board.child_code_value as categoryValue,
               cc.child_code_name            AS categoryName,
               user_id                       AS userId
        FROM notice_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.admin_seq_id = u.seq_id
        WHERE target_board.board_id = #{boardId}
    </select>

    <!--  공지사항의 카테고리 목록을 조회  -->
    <select id="getNoticeBoardCategories" parameterType="java.lang.String" resultType="CategoryDTO">
        SELECT cc.child_code_name as categoryName, cc.child_code_value as categoryValue
        FROM category_child_code cc
                 JOIN category_parent_code cp ON cc.parent_code_value = cp.parent_code_value
        WHERE cp.parent_code_value = #{categoryParentCodeValue}
    </select>

    <!-- 공지 게시글의 방문수를 1 증가    -->
    <update id="updateNoticeBoardVisitCount" parameterType="java.lang.Integer">
        UPDATE notice_board
        SET visit_count = visit_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 최근 공지사항 게시글 조회하는 쿼리 -->
    <select id="getRecentNoticeBoards" parameterType="java.lang.Integer" resultType="BoardNoticeDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName
        FROM notice_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        WHERE is_noticed = 0
        ORDER BY target_board.created_at DESC
            LIMIT #{amount}
    </select>

    <!-- 검색 조건에 해당하는 자유 게시글 리스트 조회  -->
    <select id="searchFreeBoards" parameterType="SearchConditionDTO" resultType="BoardFreeDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id as userId, COALESCE(cntComment, 0) AS
        countBoardComment,
        COALESCE(cntAttachment, 0) AS countBoardAttachment
        FROM free_board AS target_board

        JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        JOIN users AS u ON target_board.user_seq_id = u.seq_id
        LEFT JOIN (
        SELECT board_id, COUNT(*) AS cntComment
        FROM comments
        GROUP BY board_id
        ) AS countComments ON target_board.board_id = countComments.board_id
        LEFT JOIN (
        SELECT board_id, COUNT(*) AS cntAttachment
        FROM attachments
        GROUP BY board_id
        ) AS countAttachments ON target_board.board_id = countAttachments.board_id
        WHERE 1=1
        <include refid="searchQuery"/>
        <include refid="orderQuery"/>
        LIMIT #{pageSize}
        OFFSET #{offset}
    </select>

    <!-- 검색 조건에 해당하는 자유 게시글의 개수를 조회 -->
    <select id="countFreeBoards" parameterType="SearchConditionDTO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM free_board AS target_board
        WHERE 1=1
        <include refid="searchQuery"/>
    </select>

    <!-- 자유게시판 상세 내용을 조회 -->
    <select id="getFreeBoardDetail" parameterType="java.lang.Integer" resultType="BoardFreeDTO">
        SELECT target_board.*,
               target_board.child_code_value as categoryValue,
               cc.child_code_name            AS categoryName,
               u.user_id                     as userId
        FROM free_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.user_seq_id = u.seq_id
        WHERE target_board.board_id = #{boardId}
    </select>

    <!--  자유게시판 카테고리 목록을 조회  -->
    <select id="getFreeBoardCategories" resultType="CategoryDTO">
        SELECT cc.child_code_name as categoryName, cc.child_code_value as categoryValue
        FROM category_child_code cc
                 JOIN category_parent_code cp ON cc.parent_code_value = cp.parent_code_value
        WHERE cp.parent_code_value = #{categoryParentCodeValue}
    </select>

    <!-- 자유 게시글의 방문수를 1 증가    -->
    <update id="updateFreeBoardVisitCount" parameterType="java.lang.Integer">
        UPDATE free_board
        SET visit_count = visit_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 자유 게시글 저장   -->
    <insert id="saveFreeBoardInfo" parameterType="BoardFreeDTO" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO free_board
        (title, content, user_seq_id, created_at, visit_count, child_code_value)
        VALUES (#{title},
                #{content},
                (SELECT seq_id FROM users WHERE user_id = #{userId}),
                now(),
                0,
                #{categoryValue})
    </insert>

    <!-- 주어진 boardId의 작성자가 JWT에서 추출한 user_seq_id와 동일한지 확인 -->
    <select id="hasFreeBoardEditPermission" resultType="int">
        SELECT COUNT(*) > 0
        FROM free_board
        WHERE board_id = #{boardId}
          AND user_seq_id = #{seqId}
    </select>

    <!-- 자유게시글 삭제 -->
    <delete id="deleteFreeBoard">
        DELETE
        FROM free_board
        WHERE board_id = #{boardId}
    </delete>

    <!-- 자유 게시글 수정 -->
    <update id="updateFreeBoardInfo" parameterType="BoardFreeDTO">
        UPDATE free_board
        SET title            = #{title},
            content          = #{content},
            child_code_value = #{categoryValue}
        WHERE board_id = #{boardId}
    </update>

    <!-- 최근 자유 게시글 조회하는 쿼리 -->
    <select id="getRecentFreeBoards" parameterType="java.lang.Integer" resultType="BoardFreeDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id as userId, COALESCE(cntComment, 0) AS
                                                     countBoardComment,
               COALESCE(cntAttachment, 0) AS countBoardAttachment
        FROM free_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.user_seq_id = u.seq_id
                 LEFT JOIN (
            SELECT board_id, COUNT(*) AS cntComment
            FROM comments
            GROUP BY board_id
        ) AS countComments ON target_board.board_id = countComments.board_id
                 LEFT JOIN (
            SELECT board_id, COUNT(*) AS cntAttachment
            FROM attachments
            GROUP BY board_id
        ) AS countAttachments ON target_board.board_id = countAttachments.board_id
        ORDER BY target_board.created_at DESC
            LIMIT #{amount}
    </select>

    <!--  갤러리게시판 카테고리 목록을 조회  -->
    <select id="getGalleryBoardCategories" resultType="CategoryDTO">
        SELECT cc.child_code_name as categoryName, cc.child_code_value as categoryValue
        FROM category_child_code cc
                 JOIN category_parent_code cp ON cc.parent_code_value = cp.parent_code_value
        WHERE cp.parent_code_value = #{categoryParentCodeValue}
    </select>

    <!-- 갤러리 게시글 저장   -->
    <insert id="saveGalleryBoardInfo" parameterType="BoardGalleryDTO" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO gallery_board
        (title, content, user_seq_id, created_at, visit_count, child_code_value)
        VALUES (#{title},
                #{content},
                (SELECT seq_id FROM users WHERE user_id = #{userId}),
                now(),
                0,
                #{categoryValue})
    </insert>

    <!-- 검색 조건에 해당하는 갤러리 게시글 리스트 조회  -->
    <select id="searchGalleryBoards" parameterType="SearchConditionDTO" resultType="BoardGalleryDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id as userId,
            (
            SELECT fileName
            FROM images
            WHERE board_id = target_board.board_id AND priority = 1
            LIMIT 1
            ) AS thumbnailPath
        FROM gallery_board AS target_board
        JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        JOIN users AS u ON target_board.user_seq_id = u.seq_id
        WHERE 1=1
        <include refid="searchQuery"/>
        <include refid="orderQuery"/>
        LIMIT #{pageSize}
        OFFSET #{offset}
    </select>

    <!-- 검색 조건에 해당하는 갤러리 게시글의 개수를 조회 -->
    <select id="countGalleryBoards" parameterType="SearchConditionDTO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM gallery_board AS target_board
        WHERE 1=1
        <include refid="searchQuery"/>
    </select>

    <!-- 갤러리 게시글의 상세 정보를 조회하는 쿼리 -->
    <select id="getGalleryBoardDetail" parameterType="java.lang.Integer" resultType="BoardGalleryDTO">
        SELECT target_board.*,
               target_board.child_code_value as categoryValue,
               cc.child_code_name            AS categoryName,
               u.user_id                     as userId
        FROM gallery_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.user_seq_id = u.seq_id
        WHERE target_board.board_id = #{boardId}
    </select>

    <!-- 갤러리 게시글의 방문 횟수를 업데이트하는 쿼리 -->
    <update id="updateGalleryBoardVisitCount" parameterType="java.lang.Integer">
        UPDATE gallery_board
        SET visit_count = visit_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 갤러리 게시글의 편집 권한 여부를 확인하는 쿼리 -->
    <select id="hasGalleryBoardEditPermission" resultType="int">
        SELECT COUNT(*) > 0
        FROM gallery_board
        WHERE board_id = #{boardId}
          AND user_seq_id = #{seqId}
    </select>

    <!-- 문의 게시글 정보를 업데이트하는 쿼리 -->
    <update id="updateGalleryBoardInfo" parameterType="BoardGalleryDTO">
        UPDATE gallery_board
        SET title            = #{title},
            content          = #{content},
            child_code_value = #{categoryValue}
        WHERE board_id = #{boardId}
    </update>

    <!-- 갤러리 게시글 삭제하는 쿼리 -->
    <delete id="deleteGalleryBoard">
        DELETE
        FROM gallery_board
        WHERE board_id = #{boardId}
    </delete>

    <!-- 최근 갤러리 게시글 조회하는 쿼리 -->
    <select id="getRecentGalleryBoards" parameterType="java.lang.Integer" resultType="BoardGalleryDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id as userId,
               ( SELECT fileName FROM images WHERE board_id = target_board.board_id AND priority = 1 LIMIT 1 ) AS thumbnailPath,
           ( SELECT COUNT(*) FROM images WHERE board_id = target_board.board_id ) AS numOfImages
        FROM gallery_board AS target_board
            JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
            JOIN users AS u ON target_board.user_seq_id = u.seq_id
        ORDER BY target_board.created_at DESC
            LIMIT #{amount}
    </select>

    <!-- 문의 게시글 카테고리 목록 조회하는 쿼리 -->
    <select id="getInquiryBoardCategories" resultType="CategoryDTO">
        SELECT cc.child_code_name as categoryName, cc.child_code_value as categoryValue
        FROM category_child_code cc
                 JOIN category_parent_code cp ON cc.parent_code_value = cp.parent_code_value
        WHERE cp.parent_code_value = #{categoryParentCodeValue}
    </select>

    <!-- 문의 게시글 검색 쿼리 -->
    <select id="searchInquiryBoards" parameterType="SearchConditionDTO" resultType="BoardInquiryDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id as userId
        FROM inquiry_board AS target_board
        JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
        JOIN users AS u ON target_board.user_seq_id = u.seq_id
        WHERE 1=1
        <include refid="searchQuery"/>
        <include refid="orderQuery"/>
        LIMIT #{pageSize}
        OFFSET #{offset}
    </select>

    <!-- 문의 게시글 개수 조회하는 쿼리 -->
    <select id="countInquiryBoards" parameterType="SearchConditionDTO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM inquiry_board AS target_board
        WHERE 1=1
        <include refid="searchQuery"/>
    </select>

    <!-- 문의 게시글 저장 -->
    <insert id="saveInquiryBoardInfo" parameterType="BoardInquiryDTO" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO inquiry_board
        (title, content, user_seq_id, created_at, visit_count, is_secret, is_answered, password, child_code_value)
        VALUES (#{title},
                #{content},
                (SELECT seq_id FROM users WHERE user_id = #{userId}),
                now(),
                0,
                #{isSecret},
                0,
                #{password},
                #{categoryValue})
    </insert>

    <!-- 문의 게시글 편집 권한 여부를 확인하는 쿼리 -->
    <select id="hasInquiryBoardEditPermission" resultType="int">
        SELECT COUNT(*) > 0
        FROM inquiry_board
        WHERE board_id = #{boardId}
          AND user_seq_id = #{seqId}
    </select>

    <!-- 문의 게시글의 상세 정보를 조회하는 쿼리 -->
    <select id="getInquiryBoardDetail" parameterType="java.lang.Integer" resultType="BoardInquiryDTO">
        SELECT target_board.*,
               target_board.child_code_value as categoryValue,
               cc.child_code_name            AS categoryName,
               u.user_id                     as userId
        FROM Inquiry_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.user_seq_id = u.seq_id
        WHERE target_board.board_id = #{boardId}
    </select>

    <!-- 문의 게시글의 방문 횟수를 업데이트하는 쿼리 -->
    <update id="updateInquiryBoardVisitCount" parameterType="java.lang.Integer">
        UPDATE inquiry_board
        SET visit_count = visit_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 문의 게시글 삭제하는 쿼리 -->
    <delete id="deleteInquiryBoard">
        DELETE
        FROM inquiry_board
        WHERE board_id = #{boardId}
    </delete>

    <!-- 문의 게시글 정보를 업데이트하는 쿼리 -->
    <update id="updateInquiryBoardInfo" parameterType="BoardInquiryDTO">
        UPDATE inquiry_board
        SET title            = #{title},
            content          = #{content},
            child_code_value = #{categoryValue}
            <if test="password != null">
                , password = #{password}
                , is_secret = 1
            </if>
            <if test="password == null">
                , is_secret = 0
            </if>
        WHERE board_id = #{boardId}
    </update>

    <!-- 최근 문의 게시글 조회하는 쿼리 -->
    <select id="getRecentInquiryBoards" parameterType="java.lang.Integer" resultType="BoardInquiryDTO">
        SELECT target_board.*, cc.child_code_name AS categoryName, u.user_id as userId
        FROM inquiry_board AS target_board
                 JOIN category_child_code AS cc ON target_board.child_code_value = cc.child_code_value
                 JOIN users AS u ON target_board.user_seq_id = u.seq_id
        ORDER BY target_board.created_at DESC
            LIMIT #{amount}
    </select>

</mapper>